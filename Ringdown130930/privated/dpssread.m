function dataout=dpssread(filename)
%DPSSREAD:  Reads data from files generated by the Digital Power
%Stabilizer host program.
%
%Usage:
%
%  y = dpssread(filename);
%
%where
%
%  filename = String matrix with name of file to read.  If empty,
%             user is prompted to select a file.
%
%  y        = Matrix with data extracted from file.  First column
%             is time samples.

% Converted from C code dpssread.c
%
% Original header:
% $Id: dpssread.c,v 1.2 1997/12/27 00:29:20 d3h902 Exp $
% 
% DPSSREAD:  Read data from a Digital Power System Stabilizer file into MATLAB.
% 
% This function is to be compiled as a MATLAB 5.1 MEX file.
% 
% MATLAB Call:
% 
%   y = dpssread(filename);
% 
% By Jeff M. Johnson, Battelle Pacific Northwest National Laboratories
% Date : November 1996
% Modified April 26, 2013 by Frank Tuffner - conversion from C code
% 
% Copyright (c) 1995-2013 Battelle Memorial Institute.  The Government
% retains a paid-up nonexclusive, irrevocable worldwide license to
% reproduce, prepare derivative works, perform publicly and display
% publicly by or for the Government, including the right to distribute
% to other Government contractors.
% 
% *************************************************************************
% 
% User provided variables.
% These are the variables listed in the MATLAB function call above.  They
% are not passed directly to this function.
% 
%   filename = String matrix with name of file to read.  If empty, user is
%              prompted to select a file.
% 
%   y        = Matrix with data extracted from file.
% 
% *************************************************************************
% 

if (nargin > 1)
    error('Wrong number of input arguments');
end

if (nargout > 1)
    error('Wrong number of output arguments');
end

if (nargin<1)
    help dpssread_m
    return;
end

if (isempty(filename))
    [FileTemp,FilePath]=uigetfile('*.dat','Select input DPSS file');
    
    if (FileTemp==0)
        error('Please select a file!');
    end
    
    %Make the new "filename" from the retrieve
    filename=['''' FilePath FileTemp ''''];
end

%Definition
tabchar = char(9);

%Open the file
fp = fopen(filename,'rb');

%Check it
if (fp==0)
    error('Error opening file.  Check for existence and read permission.');
end

%Read size
ferr=fseek(fp,0,'eof');

if (ferr)
    error('File read error');
end

fsize=ftell(fp);

%Rewind us
ferr=fseek(fp,0,'bof');

if (ferr)
    error('File rewind error');
end

%Allocate
fcont=zeros((fsize+1),1);

%Read the file
filconttemp=fread(fp,'char');

%Close the file
fclose(fp);

%Store
fcont(1:fsize)=filconttemp;

nlstart=1;
nloff=0;
%Loop through to the 63rd line
for ival=1:62

    %Parse out "lines"
    [~,nloff_o,retchar]=mgetcl(fcont,nlstart,nloff);
    
    if retchar
        error('End of file reached before sample rate given!');
    end
    
    %Assign in next pass
    nloff=nloff_o;
end

%Temp val
nlofftemp=nloff;

%Read out the 63rd line length
[nnchar_o,~,retchar]=mgetcl(fcont,nlstart,nlofftemp);

%Parse it
icount=1;
if (~retchar)
    while (char(fcont(nlstart+nloff)) ~= '!')
        nloff = nloff + 1;
        icount = icount + 1;
    
        if (icount==nnchar_o)
            error('New line reached before expected!');
        end
    end
else
    error('End of file reached before sample rate given!');
end

%Increment point
nloff=nloff+1;
sample_int = str2double(char((fcont((nlstart+nloff):(nlstart+nloff+nnchar_o))).'));
tstep = sample_int/120.0;

%Locate data matrix
nloff = nlofftemp;

while (char(fcont(nlstart+nloff)) == '!')
    %Parse out "lines"
    [~,nloff_o,retchar]=mgetcl(fcont,nlstart,nloff);
    
    if retchar
        error('End of file reached before sample rate given!');
    end
    
    %Assign in next pass
    nloff=nloff_o;
end

%Count the number of rows and samples per row
mvar = 0;
nvar = 0;
ivar = nloff;
jvar = nloff;

while (retchar == 0)
    %Parse out "lines"
    [nnchar_o,jvar_o,retchar]=mgetcl(fcont,nlstart,jvar);
    
    if retchar
        break;
    end
    
    %Assign in next pass
    jvar=jvar_o;
    kvar=0;
    
    while (1)
        testchar = char(fcont(nlstart+nloff+kvar));
        kvar = kvar+1;
        
        if (~((testchar == ' ') || (testchar == tabchar)))
            kvar = kvar - 1;
            break;
        end
    end
    
    if (testchar == '!')
        break;
    end
    
    mvar = mvar+1;
    ns = 0;
    
    while (kvar < nnchar_o)
        kvar = kvar+1;
        testchar = char(fcont(nlstart+nloff+kvar));
        
        while ((testchar == ' ') || (testchar == tabchar))
            kvar = kvar+1;
            testchar = char(fcont(nlstart+nloff+kvar));
        end
        
        if ((testchar == '-') || (testchar == '.') || ((testchar >= '0') && (testchar <='9')))
            if (mvar == 1)
                nvar = nvar + 1;
            end
            
            ns = ns + 1;
            
            while (1)
                testchar = char(fcont(nlstart+nloff+kvar));
                kvar = kvar+1;
                
                if (~((testchar == '-') || (testchar == '.') || ((testchar >= '0') && (testchar <='9'))))
                    kvar = kvar - 1;
                    break;
                end
            end
        else
            error('End of file reached before data size determined!');
        end
    end
    
    if (ns ~= nvar)
        error('The number of samples did not match the number of columns!');
    end
    
    nloff = jvar;
end

nloff = ivar;

%Preallocate
dataout = zeros(mvar,(nvar+1));

%Populate the time portion
dataout(:,1) = ((1:mvar)-1)*tstep;

%Now loop through and extract data
for ivar=1:mvar
    kvar = 1;
    
    %Column loop
    for jvar=1:nvar
        
        %Store for later
        kvarstart = kvar;
        
        %Advance through numbers
        while (1)
            testchar = char(fcont(nlstart+nloff+kvar));
            kvar = kvar+1;

            if (~((testchar == '-') || (testchar == '.') || ((testchar >= '0') && (testchar <='9'))))
                kvar = kvar - 1;
                break;
            end
        end
        
        %Extract this data piece
        %sample_int = str2double(char((fcont((nlstart+nloff):(nlstart+nloff+nnchar_o))).'));
        dataout(ivar,(jvar+1)) = str2double(char(fcont((nlstart+nloff+kvarstart):(nlstart+nloff+kvar)).'));
        
        %Advance to next column
        kvar = kvar+1;
        testchar = char(fcont(nlstart+nloff+kvar));
        
        while ((testchar == ' ') || (testchar == tabchar))
            kvar = kvar+1;
            testchar = char(fcont(nlstart+nloff+kvar));
        end
    end
    
    %Advance it
    [~,nloff_o,retchar]=mgetcl(fcont,nlstart,nloff);
    
    if retchar
        error('End of file reached before sample rate given!');
    end
    
    %Assign in next pass
    nloff=nloff_o;
end
end

function [nnchar_o,nloff_o,retchar]=mgetcl(strarray,nlstart,nloff)
% Finds the number of characters before an EOL
% retchar is a 1 if a \0 is encountered (EOF)
%Copied from C-code in fpssread.c by Jeff Johnson

%Init
i=nloff+1;
nnchar_o = 1;

while ((strarray(nlstart+i) ~= 10) && (strarray(nlstart+i) ~= 13) && (strarray(nlstart+i) ~= 0))
    nnchar_o = nnchar_o + 1;
    i = i+1;
end

%See how we're ending
if (strarray(nlstart+i) == 0)
    retchar = 1;
    return;
else
    retchar = 0;
end

while ((strarray(nlstart+i) == 10) || (strarray(nlstart+i) == 13))
    i = i+1;
end

nloff_o = i;
end
